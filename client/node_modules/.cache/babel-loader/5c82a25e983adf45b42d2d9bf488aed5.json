{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Project\\\\carpark-finder-app\\\\client\\\\src\\\\pages\\\\TrafficCam.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport qs from \"query-string\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrafficCam = () => {\n  _s();\n\n  const [trafficImg, setTrafficImg] = useState([]);\n  const [resultImg, setResultImg] = useState([]);\n  const queryParam = qs.parse(location.search);\n  const newQueryParam = { ...queryParam,\n    user_role: \"admin\",\n    something_else: \"something\"\n  };\n  useEffect(() => {\n    const camImageUrl = \"http://localhost:4444/proxyServer/traffic_cam\";\n    axios.get(camImageUrl).then(res => {\n      console.log(res.data);\n      setTrafficImg(res.data);\n    });\n  }, []);\n  const area = {}; //  to create an object with boolean values\n\n  for (const element of CamLocation) {\n    area[element.area] = false;\n  }\n\n  const result = []; // to segregate the key with \"true\" value into a single array\n\n  const [check, setCheck] = useState(area);\n\n  for (const element of Object.keys(check)) {\n    if (check[element] === true) {\n      result.push(element);\n    }\n  }\n\n  const handleChange = event => {\n    setCheck({ ...check,\n      [event.target.name]: event.target.checked\n    });\n    console.log(event.target);\n  };\n\n  useEffect(() => {\n    //match the key with \"true\" value with the data.\n    if (check) {\n      const resultAtLast = [];\n\n      for (const element of result) {\n        for (const item of CamLocation) {\n          if (element === item.area) {\n            resultAtLast.push(item);\n          }\n        }\n      }\n\n      setResultImg(resultAtLast);\n    }\n  }, [check]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: \"Traffic Cameras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CheckBoxes, {\n        area: area,\n        check: check,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: trafficImg && trafficImg.map(element => resultImg.map(item => {\n          if (element.camera_id === item.camera_id) return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TrafficCard, {\n              img: element.image,\n              location: element.location,\n              id: element.camera_id,\n              road: item.location,\n              cluster: item.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 23\n            }, this)\n          }, element.camera_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this);\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrafficCam, \"4+ZJZfLVibsKYkJ0Y2cTrEGfK1Q=\");\n\n_c = TrafficCam;\nexport default TrafficCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrafficCam\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Project/carpark-finder-app/client/src/pages/TrafficCam.js"],"names":["axios","React","useEffect","useState","qs","Container","Box","Typography","Grid","TrafficCard","CamLocation","CheckBoxes","TrafficCam","trafficImg","setTrafficImg","resultImg","setResultImg","queryParam","parse","location","search","newQueryParam","user_role","something_else","camImageUrl","get","then","res","console","log","data","area","element","result","check","setCheck","Object","keys","push","handleChange","event","target","name","checked","resultAtLast","item","map","camera_id","image"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport qs from \"query-string\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TrafficCard from \"../components/TrafficCard\";\r\nimport CamLocation from \"../CameraLocation\";\r\nimport CheckBoxes from \"../components/CheckBoxes\";\r\n\r\nconst TrafficCam = () => {\r\n  const [trafficImg, setTrafficImg] = useState([]);\r\n  const [resultImg, setResultImg] = useState([]);\r\n\r\n  const queryParam = qs.parse(location.search);\r\n  const newQueryParam = {\r\n    ...queryParam,\r\n    user_role: \"admin\",\r\n    something_else: \"something\",\r\n  };\r\n  useEffect(() => {\r\n    const camImageUrl = \"http://localhost:4444/proxyServer/traffic_cam\";\r\n\r\n    axios.get(camImageUrl).then((res) => {\r\n      console.log(res.data);\r\n      setTrafficImg(res.data);\r\n    });\r\n  }, []);\r\n\r\n  const area = {}; //  to create an object with boolean values\r\n  for (const element of CamLocation) {\r\n    area[element.area] = false;\r\n  }\r\n\r\n  const result = []; // to segregate the key with \"true\" value into a single array\r\n  const [check, setCheck] = useState(area);\r\n\r\n  for (const element of Object.keys(check)) {\r\n    if (check[element] === true) {\r\n      result.push(element);\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setCheck({ ...check, [event.target.name]: event.target.checked });\r\n    console.log(event.target);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //match the key with \"true\" value with the data.\r\n    if (check) {\r\n      const resultAtLast = [];\r\n      for (const element of result) {\r\n        for (const item of CamLocation) {\r\n          if (element === item.area) {\r\n            resultAtLast.push(item);\r\n          }\r\n        }\r\n      }\r\n      setResultImg(resultAtLast);\r\n    }\r\n  }, [check]);\r\n\r\n  return (\r\n    <div>\r\n      <Container justify=\"center\">\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Typography variant=\"h3\">Traffic Cameras</Typography>\r\n        </Box>\r\n        <CheckBoxes area={area} check={check} handleChange={handleChange} />\r\n\r\n        <Grid container>\r\n          {trafficImg &&\r\n            trafficImg.map((element) =>\r\n              resultImg.map((item) => {\r\n                if (element.camera_id === item.camera_id)\r\n                  return (\r\n                    <Grid item key={element.camera_id}>\r\n                      <TrafficCard\r\n                        img={element.image}\r\n                        location={element.location}\r\n                        id={element.camera_id}\r\n                        road={item.location}\r\n                        cluster={item.area}\r\n                      />\r\n                    </Grid>\r\n                  );\r\n              })\r\n            )}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrafficCam;\r\n"]},"metadata":{},"sourceType":"module"}