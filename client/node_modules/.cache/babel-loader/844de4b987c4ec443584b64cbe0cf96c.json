{"ast":null,"code":"var _jsxFileName = \"/Users/shalahuddinali/Dropbox/My Mac (Shalahuddins-MacBook-Air.local)/Desktop/SEI-28/Project/project-2/src/pages/TrafficCam.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\"; // const x = {camera_id: \"7793\",\n// image: \"https://images.data.gov.sg/api/traffic-images/2021/03/91341dd0-7d15-4758-ba74-9d199d64c61c.jpg\",\n// image_metadata: {height: 360, width: 640, md5: \"021376aa84d5a2d274d6f8d99d7a6b31\"},\n// location: {latitude: 1.37704704, longitude: 103.92946983},\n// timestamp: \"2021-03-31T15:09:56+08:00\"}\n// const l = [{\n//      image:\n//           \"https://images.data.gov.sg/api/traffic-images/2021/03/3e67a31c-cbd0-4a6c-bb24-90b89d00b78c.jpg\",\n//      camera_id: \"7793\",\n//      location: \"\",\n//      area: \"ECP\",\n// },\n// {\n//      image:\n//           \"https://images.data.gov.sg/api/traffic-images/2021/03/545193ed-2468-46f5-ae08-5177992f8c96.jpg\",\n//      camera_id: \"1006\",\n//      location: \"KPE (Tampines)\",\n//      area: \"KPE\",\n// },]\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrafficCam = () => {\n  _s();\n\n  const [trafficImg, setTrafficImg] = useState([]);\n  const [resultImg, setResultImg] = useState([]);\n  console.log(\"api\", trafficImg);\n  console.log(\"data\", CamLocation);\n  useEffect(() => {\n    const camImageUrl = \"https://api.data.gov.sg/v1/transport/traffic-images\";\n    axios.get(camImageUrl).then(res => {\n      // console.log(res.data.items[0].cameras);\n      setTrafficImg(res.data.items[0].cameras);\n    });\n  }, []);\n  const area = {};\n\n  for (const element of CamLocation) {\n    area[element.area] = false;\n  }\n\n  const result = [];\n  const [check, setCheck] = useState(area);\n\n  for (const element of Object.keys(check)) {\n    if (check[element] === true) {\n      result.push(element);\n    }\n  } // console.log(\"aaa\", result);\n  // console.log(check);\n  // console.log(trafficImg);\n\n\n  const handleChange = event => {\n    setCheck({ ...check,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const resultAtLast = [];\n\n  for (element of result) {\n    for (item of CamLocation) {\n      if (element === item.area) {\n        resultAtLast.push(item.area);\n      }\n    }\n  }\n\n  setResultImg(resultAtLast);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: \"Traffic Cameras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CheckBoxes, {\n        area: area,\n        check: check,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: trafficImg && trafficImg.map(element => CamLocation.map(item => {\n          if (element.camera_id === item.camera_id) return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TrafficCard, {\n              img: element.image,\n              location: element.location,\n              id: element.camera_id,\n              road: item.location,\n              cluster: item.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this)\n          }, element.camera_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 12\n          }, this);\n        }) // if (element.camera_id === CamLocation)\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TrafficCam, \"AZEnI3dAPX9uJGAxDIyhfGbwv0A=\");\n\n_c = TrafficCam;\nexport default TrafficCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrafficCam\");","map":{"version":3,"sources":["/Users/shalahuddinali/Dropbox/My Mac (Shalahuddins-MacBook-Air.local)/Desktop/SEI-28/Project/project-2/src/pages/TrafficCam.js"],"names":["axios","React","useEffect","useState","Container","Box","Typography","Grid","TrafficCard","CamLocation","CheckBoxes","TrafficCam","trafficImg","setTrafficImg","resultImg","setResultImg","console","log","camImageUrl","get","then","res","data","items","cameras","area","element","result","check","setCheck","Object","keys","push","handleChange","event","target","name","checked","resultAtLast","item","map","camera_id","image","location"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\";\n\n// const x = {camera_id: \"7793\",\n// image: \"https://images.data.gov.sg/api/traffic-images/2021/03/91341dd0-7d15-4758-ba74-9d199d64c61c.jpg\",\n// image_metadata: {height: 360, width: 640, md5: \"021376aa84d5a2d274d6f8d99d7a6b31\"},\n// location: {latitude: 1.37704704, longitude: 103.92946983},\n// timestamp: \"2021-03-31T15:09:56+08:00\"}\n\n// const l = [{\n//      image:\n//           \"https://images.data.gov.sg/api/traffic-images/2021/03/3e67a31c-cbd0-4a6c-bb24-90b89d00b78c.jpg\",\n//      camera_id: \"7793\",\n//      location: \"\",\n//      area: \"ECP\",\n// },\n// {\n//      image:\n//           \"https://images.data.gov.sg/api/traffic-images/2021/03/545193ed-2468-46f5-ae08-5177992f8c96.jpg\",\n//      camera_id: \"1006\",\n//      location: \"KPE (Tampines)\",\n//      area: \"KPE\",\n// },]\n\nconst TrafficCam = () => {\n\tconst [trafficImg, setTrafficImg] = useState([]);\n\tconst [resultImg, setResultImg] = useState([]);\n\n\tconsole.log(\"api\", trafficImg);\n\tconsole.log(\"data\", CamLocation);\n\tuseEffect(() => {\n\t\tconst camImageUrl = \"https://api.data.gov.sg/v1/transport/traffic-images\";\n\n\t\taxios.get(camImageUrl).then((res) => {\n\t\t\t// console.log(res.data.items[0].cameras);\n\t\t\tsetTrafficImg(res.data.items[0].cameras);\n\t\t});\n\t}, []);\n\n\tconst area = {};\n\tfor (const element of CamLocation) {\n\t\tarea[element.area] = false;\n\t}\n\tconst result = [];\n\tconst [check, setCheck] = useState(area);\n\tfor (const element of Object.keys(check)) {\n\t\tif (check[element] === true) {\n\t\t\tresult.push(element);\n\t\t}\n\t}\n\n\t// console.log(\"aaa\", result);\n\n\t// console.log(check);\n\n\t// console.log(trafficImg);\n\n\tconst handleChange = (event) => {\n\t\tsetCheck({ ...check, [event.target.name]: event.target.checked });\n\t};\n\tconst resultAtLast = [];\n\tfor (element of result) {\n\t\tfor (item of CamLocation) {\n\t\t\tif (element === item.area) {\n\t\t\t\tresultAtLast.push(item.area);\n\t\t\t}\n\t\t}\n\t}\n\n\tsetResultImg(resultAtLast);\n\n\treturn (\n\t\t<div>\n\t\t\t<Container justify=\"center\">\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t<Typography variant=\"h3\">Traffic Cameras</Typography>\n\t\t\t\t</Box>\n\t\t\t\t<CheckBoxes area={area} check={check} handleChange={handleChange} />\n\n\t\t\t\t<Grid container>\n\t\t\t\t\t{trafficImg &&\n\t\t\t\t\t\ttrafficImg.map(\n\t\t\t\t\t\t\t(element) =>\n\t\t\t\t\t\t\t\tCamLocation.map((item) => {\n\t\t\t\t\t\t\t\t\tif (element.camera_id === item.camera_id)\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Grid item key={element.camera_id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<TrafficCard\n\t\t\t\t\t\t\t\t\t\t\t\t\timg={element.image}\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocation={element.location}\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={element.camera_id}\n\t\t\t\t\t\t\t\t\t\t\t\t\troad={item.location}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcluster={item.area}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t// if (element.camera_id === CamLocation)\n\t\t\t\t\t\t)}\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default TrafficCam;\n"]},"metadata":{},"sourceType":"module"}