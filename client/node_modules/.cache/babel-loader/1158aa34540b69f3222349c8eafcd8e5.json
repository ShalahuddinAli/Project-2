{"ast":null,"code":"var _jsxFileName = \"/Users/shalahuddinali/Dropbox/My Mac (Shalahuddins-MacBook-Air.local)/Desktop/SEI-28/Project/project-2/client/src/pages/TrafficCam.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrafficCam = () => {\n  _s();\n\n  const [trafficImg, setTrafficImg] = useState([]);\n  const [resultImg, setResultImg] = useState([]);\n  console.log(\"api\", trafficImg);\n  console.log(\"data\", CamLocation);\n  useEffect(() => {\n    const camImageUrl = \"https://api.data.gov.sg/v1/transport/traffic-images\";\n    axios.get(camImageUrl).then(res => {\n      setTrafficImg(res.data.items[0].cameras);\n    });\n  }, []);\n  const area = {}; //  to create an object with boolean values\n\n  for (const element of CamLocation) {\n    area[element.area] = false;\n  }\n\n  const result = []; // to segregate the key with \"true\" value into a single array\n\n  const [check, setCheck] = useState(area);\n\n  for (const element of Object.keys(check)) {\n    if (check[element] === true) {\n      result.push(element);\n    }\n  }\n\n  const handleChange = event => {\n    setCheck({ ...check,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  useEffect(() => {\n    //match the key with \"true\" value with the data.\n    if (check) {\n      const resultAtLast = [];\n\n      for (const element of result) {\n        for (const item of CamLocation) {\n          if (element === item.area) {\n            resultAtLast.push(item);\n          }\n        }\n      }\n\n      setResultImg(resultAtLast);\n    }\n  }, [check]); // const selector = {}\n  // if (resultImg) {\n  // \ttrafficImg.map((element) =>\n  // \t\tresultImg.map((item) => {\n  // \t\t\tif (element.camera_id === item.camera_id)\n  // \t\t\t\treturn {\n  // \t\t\t\t\tcamera_id: element.camera_id,\n  // \t\t\t\t\timage: element.image,\n  // \t\t\t\t\tlocation: element.location,\n  // \t\t\t\t\tcamera_id: element.camera_id,\n  // \t\t\t\t\tlocation2: item.location,\n  // \t\t\t\t\tarea: item.area,\n  // \t\t\t\t};\n  // \t\t})\n  // \t);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: \"Traffic Cameras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CheckBoxes, {\n        area: area,\n        check: check,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: trafficImg && // selector.map((element) => {\n        // \treturn (\n        // \t\t<Grid item key={element.camera_id}>\n        // \t\t\t<TrafficCard\n        // \t\t\t\timg={element.image}\n        // \t\t\t\tlocation={element.location}\n        // \t\t\t\tid={element.camera_id}\n        // \t\t\t\troad={element.location2}\n        // \t\t\t\tcluster={element.area}\n        // \t\t\t/>\n        // \t\t</Grid>\n        // \t);\n        // })\n        trafficImg.map(element => resultImg.map(item => {\n          if (element.camera_id === item.camera_id) return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TrafficCard, {\n              img: element.image,\n              location: element.location,\n              id: element.camera_id,\n              road: item.location,\n              cluster: item.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 12\n            }, this)\n          }, element.camera_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this);\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TrafficCam, \"4+ZJZfLVibsKYkJ0Y2cTrEGfK1Q=\");\n\n_c = TrafficCam;\nexport default TrafficCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrafficCam\");","map":{"version":3,"sources":["/Users/shalahuddinali/Dropbox/My Mac (Shalahuddins-MacBook-Air.local)/Desktop/SEI-28/Project/project-2/client/src/pages/TrafficCam.js"],"names":["axios","React","useEffect","useState","Container","Box","Typography","Grid","TrafficCard","CamLocation","CheckBoxes","TrafficCam","trafficImg","setTrafficImg","resultImg","setResultImg","console","log","camImageUrl","get","then","res","data","items","cameras","area","element","result","check","setCheck","Object","keys","push","handleChange","event","target","name","checked","resultAtLast","item","map","camera_id","image","location"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\";\n\nconst TrafficCam = () => {\n\tconst [trafficImg, setTrafficImg] = useState([]);\n\tconst [resultImg, setResultImg] = useState([]);\n\n\tconsole.log(\"api\", trafficImg);\n\tconsole.log(\"data\", CamLocation);\n\tuseEffect(() => {\n\t\tconst camImageUrl = \"https://api.data.gov.sg/v1/transport/traffic-images\";\n\n\t\taxios.get(camImageUrl).then((res) => {\n\t\t\tsetTrafficImg(res.data.items[0].cameras);\n\t\t});\n\t}, []);\n\n\tconst area = {}; //  to create an object with boolean values\n\tfor (const element of CamLocation) {\n\t\tarea[element.area] = false;\n\t}\n\n\tconst result = []; // to segregate the key with \"true\" value into a single array\n\tconst [check, setCheck] = useState(area);\n\n\tfor (const element of Object.keys(check)) {\n\t\tif (check[element] === true) {\n\t\t\tresult.push(element);\n\t\t}\n\t}\n\n\tconst handleChange = (event) => {\n\t\tsetCheck({ ...check, [event.target.name]: event.target.checked });\n\t};\n\n\tuseEffect(() => {\n\t\t//match the key with \"true\" value with the data.\n\t\tif (check) {\n\t\t\tconst resultAtLast = [];\n\t\t\tfor (const element of result) {\n\t\t\t\tfor (const item of CamLocation) {\n\t\t\t\t\tif (element === item.area) {\n\t\t\t\t\t\tresultAtLast.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetResultImg(resultAtLast);\n\t\t}\n\t}, [check]);\n\n\t// const selector = {}\n\t// if (resultImg) {\n\t// \ttrafficImg.map((element) =>\n\t// \t\tresultImg.map((item) => {\n\t// \t\t\tif (element.camera_id === item.camera_id)\n\t// \t\t\t\treturn {\n\t// \t\t\t\t\tcamera_id: element.camera_id,\n\t// \t\t\t\t\timage: element.image,\n\t// \t\t\t\t\tlocation: element.location,\n\t// \t\t\t\t\tcamera_id: element.camera_id,\n\t// \t\t\t\t\tlocation2: item.location,\n\t// \t\t\t\t\tarea: item.area,\n\t// \t\t\t\t};\n\t// \t\t})\n\t// \t);\n\t// }\n\n\treturn (\n\t\t<div>\n\t\t\t<Container justify=\"center\">\n\t\t\t\t<Box display=\"flex\" justifyContent=\"center\">\n\t\t\t\t\t<Typography variant=\"h3\">Traffic Cameras</Typography>\n\t\t\t\t</Box>\n\t\t\t\t<CheckBoxes area={area} check={check} handleChange={handleChange} />\n\n\t\t\t\t<Grid container>\n\t\t\t\t\t{trafficImg &&\n\t\t\t\t\t\t// selector.map((element) => {\n\t\t\t\t\t\t// \treturn (\n\t\t\t\t\t\t// \t\t<Grid item key={element.camera_id}>\n\t\t\t\t\t\t// \t\t\t<TrafficCard\n\t\t\t\t\t\t// \t\t\t\timg={element.image}\n\t\t\t\t\t\t// \t\t\t\tlocation={element.location}\n\t\t\t\t\t\t// \t\t\t\tid={element.camera_id}\n\t\t\t\t\t\t// \t\t\t\troad={element.location2}\n\t\t\t\t\t\t// \t\t\t\tcluster={element.area}\n\t\t\t\t\t\t// \t\t\t/>\n\t\t\t\t\t\t// \t\t</Grid>\n\t\t\t\t\t\t// \t);\n\t\t\t\t\t\t// })\n\t\t\t\t\t\ttrafficImg.map((element) =>\n\t\t\t\t\t\t\tresultImg.map((item) => {\n\t\t\t\t\t\t\t\tif (element.camera_id === item.camera_id)\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Grid item key={element.camera_id}>\n\t\t\t\t\t\t\t\t\t\t\t<TrafficCard\n\t\t\t\t\t\t\t\t\t\t\t\timg={element.image}\n\t\t\t\t\t\t\t\t\t\t\t\tlocation={element.location}\n\t\t\t\t\t\t\t\t\t\t\t\tid={element.camera_id}\n\t\t\t\t\t\t\t\t\t\t\t\troad={item.location}\n\t\t\t\t\t\t\t\t\t\t\t\tcluster={item.area}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)}\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default TrafficCam;\n"]},"metadata":{},"sourceType":"module"}