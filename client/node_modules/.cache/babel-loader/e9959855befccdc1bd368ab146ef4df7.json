{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Project\\\\carpark-finder-app\\\\client\\\\src\\\\pages\\\\TrafficCam.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TrafficCard from \"../components/TrafficCard\";\nimport CamLocation from \"../CameraLocation\";\nimport CheckBoxes from \"../components/CheckBoxes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrafficCam = () => {\n  _s();\n\n  const [trafficImg, setTrafficImg] = useState([]);\n  const [resultImg, setResultImg] = useState([]); // console.log(\"api\", trafficImg);\n  // console.log(\"data\", CamLocation);\n\n  useEffect(() => {\n    const camImageUrl = \"http://localhost:4444/proxyServer/traffic_cam\";\n    axios.get(camImageUrl).then(res => {\n      console.log(res.data);\n      setTrafficImg(res.data);\n    });\n  }, []);\n  const area = {}; //  to create an object with boolean values\n\n  for (const element of CamLocation) {\n    area[element.area] = false;\n  }\n\n  const result = []; // to segregate the key with \"true\" value into a single array\n\n  const [check, setCheck] = useState(area);\n\n  for (const element of Object.keys(check)) {\n    if (check[element] === true) {\n      result.push(element);\n    }\n  }\n\n  const handleChange = event => {\n    setCheck({ ...check,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  useEffect(() => {\n    //match the key with \"true\" value with the data.\n    if (check) {\n      const resultAtLast = [];\n\n      for (const element of result) {\n        for (const item of CamLocation) {\n          if (element === item.area) {\n            resultAtLast.push(item);\n          }\n        }\n      }\n\n      setResultImg(resultAtLast);\n    }\n  }, [check]); // const selector = {}\n  // if (resultImg) {\n  // \ttrafficImg.map((element) =>\n  // \t\tresultImg.map((item) => {\n  // \t\t\tif (element.camera_id === item.camera_id)\n  // \t\t\t\treturn {\n  // \t\t\t\t\tcamera_id: element.camera_id,\n  // \t\t\t\t\timage: element.image,\n  // \t\t\t\t\tlocation: element.location,\n  // \t\t\t\t\tcamera_id: element.camera_id,\n  // \t\t\t\t\tlocation2: item.location,\n  // \t\t\t\t\tarea: item.area,\n  // \t\t\t\t};\n  // \t\t})\n  // \t);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: \"Traffic Cameras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CheckBoxes, {\n        area: area,\n        check: check,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: trafficImg && // selector.map((element) => {\n        // \treturn (\n        // \t\t<Grid item key={element.camera_id}>\n        // \t\t\t<TrafficCard\n        // \t\t\t\timg={element.image}\n        // \t\t\t\tlocation={element.location}\n        // \t\t\t\tid={element.camera_id}\n        // \t\t\t\troad={element.location2}\n        // \t\t\t\tcluster={element.area}\n        // \t\t\t/>\n        // \t\t</Grid>\n        // \t);\n        // })\n        trafficImg.map(element => resultImg.map(item => {\n          if (element.camera_id === item.camera_id) return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(TrafficCard, {\n              img: element.image,\n              location: element.location,\n              id: element.camera_id,\n              road: item.location,\n              cluster: item.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 23\n            }, this)\n          }, element.camera_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this);\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrafficCam, \"4+ZJZfLVibsKYkJ0Y2cTrEGfK1Q=\");\n\n_c = TrafficCam;\nexport default TrafficCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrafficCam\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Project/carpark-finder-app/client/src/pages/TrafficCam.js"],"names":["axios","React","useEffect","useState","Container","Box","Typography","Grid","TrafficCard","CamLocation","CheckBoxes","TrafficCam","trafficImg","setTrafficImg","resultImg","setResultImg","camImageUrl","get","then","res","console","log","data","area","element","result","check","setCheck","Object","keys","push","handleChange","event","target","name","checked","resultAtLast","item","map","camera_id","image","location"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TrafficCard from \"../components/TrafficCard\";\r\nimport CamLocation from \"../CameraLocation\";\r\nimport CheckBoxes from \"../components/CheckBoxes\";\r\n\r\nconst TrafficCam = () => {\r\n  const [trafficImg, setTrafficImg] = useState([]);\r\n  const [resultImg, setResultImg] = useState([]);\r\n\r\n  // console.log(\"api\", trafficImg);\r\n  // console.log(\"data\", CamLocation);\r\n  useEffect(() => {\r\n    const camImageUrl = \"http://localhost:4444/proxyServer/traffic_cam\";\r\n\r\n    axios.get(camImageUrl).then((res) => {\r\n      console.log(res.data);\r\n      setTrafficImg(res.data);\r\n    });\r\n  }, []);\r\n\r\n  const area = {}; //  to create an object with boolean values\r\n  for (const element of CamLocation) {\r\n    area[element.area] = false;\r\n  }\r\n\r\n  const result = []; // to segregate the key with \"true\" value into a single array\r\n  const [check, setCheck] = useState(area);\r\n\r\n  for (const element of Object.keys(check)) {\r\n    if (check[element] === true) {\r\n      result.push(element);\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setCheck({ ...check, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  useEffect(() => {\r\n    //match the key with \"true\" value with the data.\r\n    if (check) {\r\n      const resultAtLast = [];\r\n      for (const element of result) {\r\n        for (const item of CamLocation) {\r\n          if (element === item.area) {\r\n            resultAtLast.push(item);\r\n          }\r\n        }\r\n      }\r\n      setResultImg(resultAtLast);\r\n    }\r\n  }, [check]);\r\n\r\n  // const selector = {}\r\n  // if (resultImg) {\r\n  // \ttrafficImg.map((element) =>\r\n  // \t\tresultImg.map((item) => {\r\n  // \t\t\tif (element.camera_id === item.camera_id)\r\n  // \t\t\t\treturn {\r\n  // \t\t\t\t\tcamera_id: element.camera_id,\r\n  // \t\t\t\t\timage: element.image,\r\n  // \t\t\t\t\tlocation: element.location,\r\n  // \t\t\t\t\tcamera_id: element.camera_id,\r\n  // \t\t\t\t\tlocation2: item.location,\r\n  // \t\t\t\t\tarea: item.area,\r\n  // \t\t\t\t};\r\n  // \t\t})\r\n  // \t);\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Container justify=\"center\">\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Typography variant=\"h3\">Traffic Cameras</Typography>\r\n        </Box>\r\n        <CheckBoxes area={area} check={check} handleChange={handleChange} />\r\n\r\n        <Grid container>\r\n          {trafficImg &&\r\n            // selector.map((element) => {\r\n            // \treturn (\r\n            // \t\t<Grid item key={element.camera_id}>\r\n            // \t\t\t<TrafficCard\r\n            // \t\t\t\timg={element.image}\r\n            // \t\t\t\tlocation={element.location}\r\n            // \t\t\t\tid={element.camera_id}\r\n            // \t\t\t\troad={element.location2}\r\n            // \t\t\t\tcluster={element.area}\r\n            // \t\t\t/>\r\n            // \t\t</Grid>\r\n            // \t);\r\n            // })\r\n            trafficImg.map((element) =>\r\n              resultImg.map((item) => {\r\n                if (element.camera_id === item.camera_id)\r\n                  return (\r\n                    <Grid item key={element.camera_id}>\r\n                      <TrafficCard\r\n                        img={element.image}\r\n                        location={element.location}\r\n                        id={element.camera_id}\r\n                        road={item.location}\r\n                        cluster={item.area}\r\n                      />\r\n                    </Grid>\r\n                  );\r\n              })\r\n            )}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrafficCam;\r\n"]},"metadata":{},"sourceType":"module"}